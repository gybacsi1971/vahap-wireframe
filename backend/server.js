/**
 * VAHAP 2.0 Backend API Server
 *
 * Node.js + Express + SQLite backend a VAHAP rendszerhez
 */

const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const Database = require('better-sqlite3');
const path = require('path');

// K√∂rnyezeti v√°ltoz√≥k bet√∂lt√©se
dotenv.config();

// Konfigur√°ci√≥
const PORT = process.env.PORT;
if (!PORT) {
    throw new Error('PORT k√∂rnyezeti v√°ltoz√≥ nincs be√°ll√≠tva! N√©zd meg a .env f√°jlt.');
}

const DB_PATH = process.env.DB_PATH;
if (!DB_PATH) {
    throw new Error('DB_PATH k√∂rnyezeti v√°ltoz√≥ nincs be√°ll√≠tva! N√©zd meg a .env f√°jlt.');
}

const CORS_ORIGINS = process.env.CORS_ORIGINS;
if (!CORS_ORIGINS) {
    throw new Error('CORS_ORIGINS k√∂rnyezeti v√°ltoz√≥ nincs be√°ll√≠tva! N√©zd meg a .env f√°jlt.');
}

// Express app inicializ√°l√°sa
const app = express();

// SQLite adatb√°zis kapcsolat
let db;
try {
    db = new Database(DB_PATH, { verbose: console.log });
    console.log(`‚úÖ SQLite adatb√°zis kapcsolat l√©trehozva: ${DB_PATH}`);
} catch (error) {
    console.error('‚ùå Hiba az adatb√°zis kapcsolat l√©trehoz√°sakor:', error.message);
    console.error('üí° Futtasd a k√∂vetkez≈ë parancsot: npm run db:init');
    process.exit(1);
}

// Middleware-ek
app.use(cors({
    origin: CORS_ORIGINS.split(',').map(o => o.trim())
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// K√©r√©sek napl√≥z√°sa
app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.path}`);
    next();
});

// Adatb√°zis objektum el√©rhet≈ëv√© t√©tele az eg√©sz alkalmaz√°sban
app.locals.db = db;

// API Route-ok bet√∂lt√©se
const parameterezoRoutes = require('./routes/parameterezo');
const vasutRoutes = require('./routes/vasut');
const hajozasRoutes = require('./routes/hajozas');

// Route-ok regisztr√°l√°sa
app.use('/api/parameterezo', parameterezoRoutes);
app.use('/api/vasut', vasutRoutes);
app.use('/api/hajozas', hajozasRoutes);

// Health check endpoint
app.get('/api/health', (req, res) => {
    try {
        // Adatb√°zis kapcsolat tesztel√©se
        const result = db.prepare('SELECT 1 as test').get();
        res.json({
            status: 'OK',
            timestamp: new Date().toISOString(),
            database: result.test === 1 ? 'Connected' : 'Error',
            version: '1.0.0'
        });
    } catch (error) {
        res.status(500).json({
            status: 'ERROR',
            message: error.message
        });
    }
});

// Gy√∂k√©r endpoint
app.get('/', (req, res) => {
    res.json({
        message: 'VAHAP 2.0 Backend API',
        version: '1.0.0',
        endpoints: {
            health: '/api/health',
            parameterezo: '/api/parameterezo/*',
            vasut: '/api/vasut/*',
            hajozas: '/api/hajozas/*'
        },
        documentation: 'https://github.com/vahap/docs'
    });
});

// 404 kezel√©se
app.use((req, res) => {
    res.status(404).json({
        error: 'Not Found',
        message: `Az endpoint (${req.method} ${req.path}) nem tal√°lhat√≥.`,
        timestamp: new Date().toISOString()
    });
});

// Hibakezel√©s
app.use((err, req, res, next) => {
    console.error('‚ùå Hiba:', err.stack);
    res.status(500).json({
        error: 'Internal Server Error',
        message: err.message,
        timestamp: new Date().toISOString()
    });
});

// Szerver ind√≠t√°sa
app.listen(PORT, () => {
    console.log('\nüöÄ VAHAP Backend API elindult!');
    console.log(`üì° Szerver: http://localhost:${PORT}`);
    console.log(`üóÑÔ∏è  Adatb√°zis: ${DB_PATH}`);
    console.log(`üåê CORS enged√©lyezett: ${CORS_ORIGINS}`);
    console.log('\nüìö El√©rhet≈ë endpointok:');
    console.log(`   GET  http://localhost:${PORT}/`);
    console.log(`   GET  http://localhost:${PORT}/api/health`);
    console.log(`   *    http://localhost:${PORT}/api/parameterezo/*`);
    console.log(`   *    http://localhost:${PORT}/api/vasut/*`);
    console.log(`   *    http://localhost:${PORT}/api/hajozas/*`);
    console.log('\n‚úÖ A szerver fut √©s k√©szen √°ll a k√©r√©sek fogad√°s√°ra.\n');
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\n‚èπÔ∏è  Szerver le√°ll√≠t√°sa...');
    db.close();
    console.log('‚úÖ Adatb√°zis kapcsolat lez√°rva.');
    process.exit(0);
});
